# -*- coding: utf-8 -*-
"""Assignment_4_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1btzFly4YhdaBJ0C-JCUNa637tvBk0wGs
"""

from google.colab import drive
drive.mount('/content/drive')

#IMPORT libraries
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Convolution2D
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.layers import Flatten

from keras.preprocessing.image import ImageDataGenerator

train_datagen=ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)
test_datagen=ImageDataGenerator(rescale=1./255)

x_train=train_datagen.flow_from_directory("/content/drive/MyDrive/AI/archive(1)/train",target_size=(64,64),batch_size=32,class_mode="categorical")
x_test=test_datagen.flow_from_directory("/content/drive/MyDrive/AI/archive(1)/test",target_size=(64,64),batch_size=32,class_mode="categorical")

x_train.class_indices

#initialize model
model=Sequential()

# adding convolution layer
model.add(Convolution2D(32,(3,3),input_shape=(64,64,3),activation="relu"))

#pooling layer
model.add(MaxPooling2D(pool_size=(2,2)))

#flatten layer/ input to ann
model.add(Flatten())

#add hidden
model.add(Dense(units=128,activation="relu"))

#output layer
model.add(Dense(units=70,activation="softmax"))

model.summary()

#configure the learning process(loss function, accuracy, optimizer)
model.compile(loss="categorical_crossentropy",optimizer="adam",metrics=["accuracy"])

nb_train_samples=7946
nb_validation_samples=700
batch_size=32

model.fit(x_train,steps_per_epoch=nb_train_samples//batch_size,epochs=30,validation_data=x_test,validation_steps=nb_validation_samples//batch_size)

model.save("/content/drive/MyDrive/AI/dog.h5")

#Testing
from tensorflow.keras.models import load_model
from keras.preprocessing import image
import numpy as np

model=load_model("/content/drive/MyDrive/AI/dog.h5")

img=image.load_img("/content/drive/MyDrive/AI/archive(1)/bull1.jpg",target_size=(64,64))

img

x=image.img_to_array(img)
x

x.shape

x=np.expand_dims(x,axis=0)
x

x.shape

#pred=model.predict_classes(x)
y=model.predict(x)
pred=np.argmax(y,axis=1)

pred

x_train.class_indices

#image2
img1=image.load_img("/content/drive/MyDrive/AI/archive(1)/gm1.jpg",target_size=(64,64))
img1

x1=image.img_to_array(img1)
print(x1.shape)
x1

x1=np.expand_dims(x1,axis=0)
print(x1.shape)
x1

y1=model.predict(x1)
pred=np.argmax(y1,axis=1)
pred

x_train.class_indices

